#!/usr/bin/env node
var debug = require('debug')('ohmpha-app');
var particle = require('../lib/particle');
var app = require('../app');
var Io = require('socket.io');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

var io = Io(server);
var userCount = 0;
io.on('connection', function(socket){
  userCount += 1;
  io.emit('connection:increment', userCount);

  socket.on('disconnect', function(){
    userCount -= 1;
    io.emit('connection:decrement', userCount);
  });

  socket.on('circuit:on', function(){
    io.emit('circuit:power:on');
  });

  socket.on('circuit:off', function(){
    io.emit('circuit:power:off');
  });

  socket.on('resistor:update', function(val){
    if(val === 'add'){
      io.emit('resistor:added');
    } else {
      io.emit('resistor:removed');
    }
  });

  socket.on('toggler:clicked', function(){
      io.emit('codebender:toggle');
  });

  socket.on('message:send', function(data){
    io.emit('message:recieve', data);
  });

  socket.on('bulb:explode', function(){
    particle('led', 'off', function(err, res, body){
      if(err){
        conosle.log(err);
        return;
      }
      console.log(body);
    });
  });

  socket.on('bulb:shine', function(brightness){
    particle('led', 'on', function(err, res, body){
      if(err){
        conosle.log(err);
        return;
      }
      console.log(body);
    });
  });

  socket.on('bulb:off', function(){
    particle('led', 'off', function(err, res, body){
      if(err){
        conosle.log(err);
        return;
      }
      console.log(body);
    });
  });
});
